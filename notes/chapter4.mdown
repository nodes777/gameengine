# Chapter 4: Common Components of Video Games
	* Control Renderable object's pos, size and rotation to do movement
	* Recieve keyboard input to animate Renderables
	* Async loading and unloading of assets
	* Define, load, and execute a simple game level
	* Change game level by adding a new scene
	* Work with sound

## 4.1 Game Loop Project

	```elapsedTime = now;
previousLoop = now;
while(game running) {
    elapsedTime += now - previousLoop;
    previousLoop = now;

    input();
    while( elapsedTime >= UPDATE_TIME_RATE ) {
        update();
        elapsedTime -= UPDATE_TIME_RATE;
    }
    draw();
}```

Notice that when the loop is running quickly, it is entirely possible for the _runLoop() function to be called multiple times within a single kMPF interval. With the given _runLoop() implementation, the draw() function will be called multiples times without any update() function calls. This way, the game loop can end up drawing the same game state multiple times.

* http://gameprogrammingpatterns.com/game-loop.html#play-catch-up
* http://gafferongames.com/game-physics/fix-your-timestep/

## 4.2 Keyboard Input

* To implement an engine component to receive keyboard input
* To understand the difference between key state (if a key is released or pressed) and key event (when the key state changes)
* To understand how to integrate the input component in the game loop

## 4.3 Resource Management

* To understand the handling of asynchronous loading
* To build an infrastructure that supports future resource loading and accessing
* To experience asynchronous resource loading via loading of the GLSL shader files

### TextFileLoader object
	* The ResourceMap.asyncLoadRequested(fileName) function is called to register a new asynchronous XMLHttpRequest loading request. Take note of how these two classes collaborate; ResourceMap registers that there is one outstanding load operation, while TextFileLoader is performing the actual loading operation.
	* The ResourceMap.asyncLoadCompleted() function is called and passed the loaded results when it becomes available. In this way, the ResourceMap entry identified by fileName will have its MapEntry.mAsset set to reference fileContent, the loaded asset.

### Default Resources
	* Some things we need always, like the GLSL shader files
	* We should load them during engine initialization
	* mConstColorShader is a SimpleShader that can be shared for all instances of Renderables

### Async load isnt happening and error isnt throwing
	* Textfileloader file
	* req.onload never fires
	* mNumOustandingLoads never decrements
	** The diff is in textfileloader and resourcemap
	*** textfileloader never had send req
	*** resourcemap had funcs in the wrong order :(

## 4.4 Scene File Loader
	* Scene file as define by client - MyGame.js
	* To introduce the protocol for supporting asynchronous loading of the resources of a game
 	* To develop the proper game engine support for the protocol
	* To identify and define the public interface methods for a general game level
	** Instead of hardcoding the initialize func, make it flexible by taking in an XML file of objects in the game scene
	