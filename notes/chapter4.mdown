# Chapter 4: Common Components of Video Games
	* Control Renderable object's pos, size and rotation to do movement
	* Recieve keyboard input to animate Renderables
	* Async loading and unloading of assets
	* Define, load, and execute a simple game level
	* Change game level by adding a new scene
	* Work with sound

## 4.1 Game Loop Project

	```elapsedTime = now;
previousLoop = now;
while(game running) {
    elapsedTime += now - previousLoop;
    previousLoop = now;

    input();
    while( elapsedTime >= UPDATE_TIME_RATE ) {
        update();
        elapsedTime -= UPDATE_TIME_RATE;
    }
    draw();
}```

Notice that when the loop is running quickly, it is entirely possible for the _runLoop() function to be called multiple times within a single kMPF interval. With the given _runLoop() implementation, the draw() function will be called multiples times without any update() function calls. This way, the game loop can end up drawing the same game state multiple times.

* http://gameprogrammingpatterns.com/game-loop.html#play-catch-up
* http://gafferongames.com/game-physics/fix-your-timestep/

## 4.2 Keyboard Input

* To implement an engine component to receive keyboard input
* To understand the difference between key state (if a key is released or pressed) and key event (when the key state changes)
* To understand how to integrate the input component in the game loop

## Resource Management

